package com.combatsystem.www.service ;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.combatsystem.www.dto.AdminMessageDto;
import com.combatsystem.www.dto.BlockedUsersDto;
import com.combatsystem.www.dto.DecryptedMessageDto;
import com.combatsystem.www.dto.EncryptedMessageDto;
import com.combatsystem.www.dto.UserResponseDto;
import com.combatsystem.www.model.Admin;
import com.combatsystem.www.model.AdminEncryptedMessage;
import com.combatsystem.www.model.IOTOperator;
import com.combatsystem.www.model.IotEncryptedMessage;
import com.combatsystem.www.model.Soldier;
import com.combatsystem.www.model.SoldierEncryptedMessage;
import com.combatsystem.www.model.UAVOperator;
import com.combatsystem.www.model.UavEncryptedMessage;
import com.combatsystem.www.repository.AdminEncryptedMessageRepo;
import com.combatsystem.www.repository.AdminRepository;
import com.combatsystem.www.repository.IOTOperatorRepo;
import com.combatsystem.www.repository.IotEncryptedMessageRepository;
import com.combatsystem.www.repository.SoldierEncryptedRepository;
import com.combatsystem.www.repository.SoldierRepo;
import com.combatsystem.www.repository.UAVOperatorRepo;
import com.combatsystem.www.repository.UavEncryptedMessageRepository;

@Service
public class AdminService {

    @Autowired
    private AdminRepository adminRepository;
    
    @Autowired
    private UAVOperatorRepo uavOperatorRepo;

    @Autowired
    private IOTOperatorRepo iotDeviceOperatorRepo;

    @Autowired
    private SoldierRepo soldierRepo;
    
    @Autowired
    private SoldierEncryptedRepository soldierEncryptedRepo;
    
    @Autowired
    private IotEncryptedMessageRepository iotEncryptedRepo;
    
    private static final String KEY = "MySecretKey12345";  
    private static final String ALGORITHM = "AES";

    @Autowired
    private UavEncryptedMessageRepository uavEncRepo;
    
    @Autowired
    private EncryptionUtils encryptionUtils;
    @Autowired
    private AdminEncryptedMessageRepo adminEncryptRepo;
    
    public boolean validateCredentials(String email, String password) {
        Admin admin = adminRepository.findByEmail(email);

        if (admin == null) {
            System.out.println("Admin not found for email: " + email);
            return false;
        }

        System.out.println("Stored email: " + admin.getEmail());
        System.out.println("Stored password: " + admin.getPassword());

        // If you're using plain text (bad practice but OK for demo)
        return admin.getPassword().trim().equals(password.trim());
    }

    public void generateAndSendOtp(String email) {
        Admin admin = adminRepository.findByEmail(email);
        if (admin != null) {
            String otp = String.valueOf((int)(Math.random() * 900000) + 100000);
            admin.setOtp(otp);
            admin.setOtpVerified(false); // or 0 if you're using byte
            adminRepository.save(admin);

            // Simulate sending OTP
            System.out.println("OTP sent to " + email + ": " + otp);
        }
    }

    public boolean verifyOtp(String email, String otp) {
        Admin admin = adminRepository.findByEmail(email);
        if (admin != null && admin.getOtp().equals(otp)) {
            admin.setOtpVerified(true);
            adminRepository.save(admin);
            return true;
        }
        return false;
    }
    
    public List<UserResponseDto> fetchAllUsers() {
        List<UserResponseDto> allUsers = new ArrayList<>();

        for (UAVOperator uav : uavOperatorRepo.findAll()) {
            allUsers.add(new UserResponseDto(uav.getId(), uav.getUserName(), uav.getEmail(), "UAV_OPERATOR", uav.getStatus()));
        }

        for (IOTOperator iot : iotDeviceOperatorRepo.findAll()) {
            allUsers.add(new UserResponseDto(iot.getId(), iot.getUserName(), iot.getEmail(), "IOT_DEVICE_OPERATOR", iot.getStatus()));
        }

        for (Soldier soldier : soldierRepo.findAll()) {
            allUsers.add(new UserResponseDto(soldier.getId(), soldier.getUserName(), soldier.getEmail(), "SOLDIER", soldier.getStatus()));
        }

        return allUsers;
    }

    private String decrypt(String encryptedText) {
        try {
            SecretKeySpec secretKey = new SecretKeySpec(KEY.getBytes(), ALGORITHM);
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decoded = Base64.getDecoder().decode(encryptedText);
            byte[] decryptedBytes = cipher.doFinal(decoded);
            return new String(decryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return "Decryption Error";
        }
    }

    public List<DecryptedMessageDto> decryptUavMessages(Long userId) {
        List<UavEncryptedMessage> messages = uavEncRepo.findByUavOperatorId(userId);
        List<DecryptedMessageDto> decryptedMessages = new ArrayList<>();

        for (UavEncryptedMessage msg : messages) {
            String message = decrypt(msg.getBlock1() + msg.getBlock2() + msg.getBlock3());
            String latitude = decrypt(msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3());
            String longitude = decrypt(msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3());
       

            decryptedMessages.add(new DecryptedMessageDto(message, latitude, longitude));
        }

        return decryptedMessages;
    }

    
    public List<DecryptedMessageDto> decryptIotMessages(Long userId) {
        List<IotEncryptedMessage> messages = iotEncryptedRepo.findByIotOperatorId(userId);
        List<DecryptedMessageDto> decryptedMessages = new ArrayList<>();

        for (IotEncryptedMessage msg : messages) {
            String message = decrypt(msg.getBlock1() + msg.getBlock2() + msg.getBlock3());
            String latitude = decrypt(msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3());
            String longitude = decrypt(msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3());

            decryptedMessages.add(new DecryptedMessageDto(message, latitude, longitude));
        }

        return decryptedMessages;
    }


    public List<DecryptedMessageDto> decryptSoldierMessages(Long userId) {
        List<SoldierEncryptedMessage> messages = soldierEncryptedRepo.findBySoldierOperatorId(userId);
        List<DecryptedMessageDto> decryptedMessages = new ArrayList<>();

        for (SoldierEncryptedMessage msg : messages) {
            String message = decrypt(msg.getBlock1() + msg.getBlock2() + msg.getBlock3());
            String latitude = decrypt(msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3());
            String longitude = decrypt(msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3());
           

            decryptedMessages.add(new DecryptedMessageDto(message, latitude, longitude));
        }

        return decryptedMessages;
    }


    
    public List<EncryptedMessageDto> uavEncryptMessages(Long userId) {
        List<UavEncryptedMessage> messages = uavEncRepo.findByUavOperatorId(userId);

        List<EncryptedMessageDto> encryptedMessages = new ArrayList<>();

        for (UavEncryptedMessage msg : messages) {
            String message = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitude = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitude = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            EncryptedMessageDto dto = new EncryptedMessageDto(message, latitude, longitude);
            encryptedMessages.add(dto);
        }

        return encryptedMessages;
    }


    
    public List<EncryptedMessageDto> iotEncryptMessages(Long userId) {
        List<IotEncryptedMessage> messages = iotEncryptedRepo.findByIotOperatorId(userId);

        List<EncryptedMessageDto> encryptedMessages = new ArrayList<>();

        for (IotEncryptedMessage msg : messages) {
            String message = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitude = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitude = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            EncryptedMessageDto dto = new EncryptedMessageDto(message, latitude, longitude);
            encryptedMessages.add(dto);
        }

        return encryptedMessages;
    }

    
    public List<EncryptedMessageDto> soldierEncryptMessages(Long userId) {
        List<SoldierEncryptedMessage> messages = soldierEncryptedRepo.findBySoldierOperatorId(userId);

        List<EncryptedMessageDto> encryptedMessages = new ArrayList<>();

        for (SoldierEncryptedMessage msg : messages) {
            String message = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitude = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitude = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            EncryptedMessageDto dto = new EncryptedMessageDto(message, latitude, longitude);
            encryptedMessages.add(dto);
        }

        return encryptedMessages;
    }
    
    public void saveAdminEncryptMessage(String message, String userEmail)
    {
    	Map<String,String> blocks=encryptionUtils.encryptAndSplit(message);
    	
    	AdminEncryptedMessage msg=new AdminEncryptedMessage();
    	
    	msg.setReceiverEmail(userEmail);
    	msg.setBlock1(blocks.get("block1"));
    	msg.setBlock2(blocks.get("block2"));
    	msg.setBlock3(blocks.get("block3"));
    	msg.setTimeStamp(LocalDateTime.now());
    	
    	adminEncryptRepo.save(msg);
    	
    }

   public List<AdminMessageDto> getMessagesForUser(String email)
   {
	   List<AdminEncryptedMessage> encryptedMessages= adminEncryptRepo.findByReceiverEmail(email);
	   
	   List<AdminMessageDto> result=new ArrayList<>();
	   
	   for (AdminEncryptedMessage encryptedMsg : encryptedMessages) {
	        
	        String decrypted = encryptionUtils.decryptFromBlocks(
	                encryptedMsg.getBlock1(),
	                encryptedMsg.getBlock2(),
	                encryptedMsg.getBlock3()
	        );
	    
	        AdminMessageDto dto=new AdminMessageDto();
	        dto.setMessage(decrypted);
	        dto.setTimeStamp(encryptedMsg.getTimeStamp());

	        result.add(dto);
	    }

	    return result;
   }
   
   public List<BlockedUsersDto> fetchAllBlockedUsers(String status) {
       List<BlockedUsersDto> allBlockedUsers = new ArrayList<>();

       for (UAVOperator uav : uavOperatorRepo.findByStatus(status)) {
           allBlockedUsers.add(new BlockedUsersDto(uav.getId(), uav.getUserName(), uav.getEmail(), uav.getDeviceType(), uav.getLatitude(), uav.getLongitude(), uav.getRole()));
       }

       for (IOTOperator iot : iotDeviceOperatorRepo.findByStatus(status)) {
           allBlockedUsers.add(new BlockedUsersDto(iot.getId(), iot.getUserName(), iot.getEmail(), iot.getDeviceType(), iot.getLatitude(), iot.getLongitude(), iot.getRole()));
             }

       for (Soldier soldier : soldierRepo.findByStatus(status)) {
           allBlockedUsers.add(new BlockedUsersDto(soldier.getId(), soldier.getUserName(), soldier.getEmail(), soldier.getDeviceType(), soldier.getLatitude(), soldier.getLongitude(), soldier.getRole()));
           
       }
       return allBlockedUsers;
   }
   
   public boolean markMessageAsHackedByTimestampString(String timestampStr) {
	    if (timestampStr == null || timestampStr.isEmpty()) {
	        return false;
	    }

	    // Remove any extra whitespace/newlines
	    timestampStr = timestampStr.trim();

	    // Remove fractional seconds if present
	    if (timestampStr.contains(".")) {
	        timestampStr = timestampStr.split("\\.")[0];
	    }

	    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
	    LocalDateTime start = LocalDateTime.parse(timestampStr, formatter);
	    LocalDateTime end = start.plusSeconds(1);

	    int updated = adminEncryptRepo.updateStatusByTimestampRange(start, end, "AHACKED");
	    return updated > 0;
	}
   
   public List<AdminMessageDto> getAhackedMessages(String status)
   {
	   List<AdminEncryptedMessage> ahackedMessages= adminEncryptRepo.findByStatus(status);
	   
	   List<AdminMessageDto> result=new ArrayList<>();
	   
	   for (AdminEncryptedMessage encryptedMsg : ahackedMessages) {
	        
	        String decrypted = encryptionUtils.decryptFromBlocks(
	                encryptedMsg.getBlock1(),
	                encryptedMsg.getBlock2(),
	                encryptedMsg.getBlock3()
	        );
	        
	        AdminMessageDto dto=new AdminMessageDto();
	        dto.setMessage(decrypted);
	        dto.setTimeStamp(encryptedMsg.getTimeStamp());
	        dto.setEmail(encryptedMsg.getReceiverEmail());

	        result.add(dto);
	    }

	    return result;
   }
}
















