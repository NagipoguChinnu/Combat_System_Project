package com.combatsystem.www.service ;

import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.combatsystem.www.dto.UserResponseDto;
import com.combatsystem.www.model.Admin;
import com.combatsystem.www.model.IOTOperator;
import com.combatsystem.www.model.IotEncryptedMessage;
import com.combatsystem.www.model.Soldier;
import com.combatsystem.www.model.SoldierEncryptedMessage;
import com.combatsystem.www.model.UAVOperator;
import com.combatsystem.www.model.UavEncryptedMessage;
import com.combatsystem.www.repository.AdminRepository;
import com.combatsystem.www.repository.IOTOperatorRepo;
import com.combatsystem.www.repository.IotEncryptedMessageRepository;
import com.combatsystem.www.repository.SoldierEncryptedRepository;
import com.combatsystem.www.repository.SoldierRepo;
import com.combatsystem.www.repository.UAVOperatorRepo;
import com.combatsystem.www.repository.UavEncryptedMessageRepository;

@Service
public class AdminService {

    @Autowired
    private AdminRepository adminRepository;
    
    @Autowired
    private UAVOperatorRepo uavOperatorRepo;

    @Autowired
    private IOTOperatorRepo iotDeviceOperatorRepo;

    @Autowired
    private SoldierRepo soldierRepo;
    
    @Autowired
    private SoldierEncryptedRepository soldierEncryptedRepo;
    
    @Autowired
    private IotEncryptedMessageRepository iotEncryptedRepo;
    
    private static final String KEY = "MySecretKey12345";  
    private static final String ALGORITHM = "AES";

    @Autowired
    private UavEncryptedMessageRepository uavEncRepo;
    
    public boolean validateCredentials(String email, String password) {
        Admin admin = adminRepository.findByEmail(email);

        if (admin == null) {
            System.out.println("Admin not found for email: " + email);
            return false;
        }

        System.out.println("Stored email: " + admin.getEmail());
        System.out.println("Stored password: " + admin.getPassword());

        // If you're using plain text (bad practice but OK for demo)
        return admin.getPassword().trim().equals(password.trim());
    }

    public void generateAndSendOtp(String email) {
        Admin admin = adminRepository.findByEmail(email);
        if (admin != null) {
            String otp = String.valueOf((int)(Math.random() * 900000) + 100000);
            admin.setOtp(otp);
            admin.setOtpVerified(false); // or 0 if you're using byte
            adminRepository.save(admin);

            // Simulate sending OTP
            System.out.println("OTP sent to " + email + ": " + otp);
        }
    }

    public boolean verifyOtp(String email, String otp) {
        Admin admin = adminRepository.findByEmail(email);
        if (admin != null && admin.getOtp().equals(otp)) {
            admin.setOtpVerified(true);
            adminRepository.save(admin);
            return true;
        }
        return false;
    }
    
    public List<UserResponseDto> fetchAllUsers() {
        List<UserResponseDto> allUsers = new ArrayList<>();

        for (UAVOperator uav : uavOperatorRepo.findAll()) {
            allUsers.add(new UserResponseDto(uav.getId(), uav.getUserName(), uav.getEmail(), "UAV_OPERATOR", uav.getStatus()));
        }

        for (IOTOperator iot : iotDeviceOperatorRepo.findAll()) {
            allUsers.add(new UserResponseDto(iot.getId(), iot.getUserName(), iot.getEmail(), "IOT_DEVICE_OPERATOR", iot.getStatus()));
        }

        for (Soldier soldier : soldierRepo.findAll()) {
            allUsers.add(new UserResponseDto(soldier.getId(), soldier.getUserName(), soldier.getEmail(), "SOLDIER", soldier.getStatus()));
        }

        return allUsers;
    }

    private String decrypt(String encryptedText) {
        try {
            SecretKeySpec secretKey = new SecretKeySpec(KEY.getBytes(), ALGORITHM);
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decoded = Base64.getDecoder().decode(encryptedText);
            byte[] decryptedBytes = cipher.doFinal(decoded);
            return new String(decryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return "Decryption Error";
        }
    }

    public List<String> decryptUavMessages(Long userId) {
        List<UavEncryptedMessage> messages = uavEncRepo.findByUavOperatorId(userId);

        if (messages.isEmpty()) {
            return List.of("No messages found for UAV Operator with ID: " + userId);
        }

        List<String> decryptedMessages = new ArrayList<>();

        for (UavEncryptedMessage msg : messages) {
            String messageEncrypted = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitudeEncrypted = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitudeEncrypted = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            String decrypted = "Message: " + decrypt(messageEncrypted) +
                               ", Latitude: " + decrypt(latitudeEncrypted) +
                               ", Longitude: " + decrypt(longitudeEncrypted);

            decryptedMessages.add(decrypted);
        }

        return decryptedMessages;
    }



    public String decryptIotMessage(Long id) {
        Optional<IotEncryptedMessage> optional = iotEncryptedRepo.findById(id);
        if (optional.isPresent()) {
            IotEncryptedMessage msg = optional.get();

            String messageEncrypted = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitudeEncrypted = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitudeEncrypted = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            return "Message: " + decrypt(messageEncrypted) +
                   ", Latitude: " + decrypt(latitudeEncrypted) +
                   ", Longitude: " + decrypt(longitudeEncrypted);
        }
        return "IOT Message not found";
    }

    public String decryptSoldierMessage(Long id) {
        Optional<SoldierEncryptedMessage> optional = soldierEncryptedRepo.findById(id);
        if (optional.isPresent()) {
            SoldierEncryptedMessage msg = optional.get();

            String messageEncrypted = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitudeEncrypted = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitudeEncrypted = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            return "Message: " + decrypt(messageEncrypted) +
                   ", Latitude: " + decrypt(latitudeEncrypted) +
                   ", Longitude: " + decrypt(longitudeEncrypted);
        }
        return "Soldier Message not found";
    }

    public String uavEncryptMessage(Long userId) {
        List<UavEncryptedMessage> messages = uavEncRepo.findByUavOperatorId(userId);

        if (messages.isEmpty()) {
            return "UAV Operator Messages not found";
        }

        StringBuilder result = new StringBuilder();
        int count = 1;

        for (UavEncryptedMessage msg : messages) {
            String messageEncrypted = msg.getBlock1() + msg.getBlock2() + msg.getBlock3();
            String latitudeEncrypted = msg.getLatitudeBlock1() + msg.getLatitudeBlock2() + msg.getLatitudeBlock3();
            String longitudeEncrypted = msg.getLongitudeBlock1() + msg.getLongitudeBlock2() + msg.getLongitudeBlock3();

            result.append("Message ").append(count++).append(":\n")
                  .append("Encrypted Message: ").append(messageEncrypted).append("\n")
                  .append("Latitude: ").append(latitudeEncrypted).append("\n")
                  .append("Longitude: ").append(longitudeEncrypted).append("\n\n");
        }

        return result.toString();
    }

    
    public String iotEncryptMessage(Long id)
    {
    	Optional<IotEncryptedMessage> optional=iotEncryptedRepo.findById(id);
    	
    	if(optional.isPresent())
    	{
    		IotEncryptedMessage msg=optional.get();
    		
    		String messageEncrypted=msg.getBlock1()+msg.getBlock2()+msg.getBlock3();
    		String latitudeEncrypted=msg.getLatitudeBlock1()+msg.getLatitudeBlock2()+msg.getLatitudeBlock3();
    		String longitudeEncrypted=msg.getLongitudeBlock1()+msg.getLongitudeBlock2()+msg.getLongitudeBlock3();
    		
    		return "Message : "+messageEncrypted+", Latitude : "+latitudeEncrypted+", Longitude : "+longitudeEncrypted;
    	}
    	return "IOT Device Operator Message not found";
    }
    
    public String soldierEncryptedMessage(Long id)
    {
    	Optional<SoldierEncryptedMessage> optional=soldierEncryptedRepo.findById(id);
    	
    	if(optional.isPresent())
    	{
    		SoldierEncryptedMessage msg=optional.get();
    		
    		String messageEncrypted=msg.getBlock1()+msg.getBlock2()+msg.getBlock3();
    		String latitudeEncrypted=msg.getLatitudeBlock1()+msg.getLatitudeBlock2()+msg.getLatitudeBlock3();
    		String longitudeEncrypted=msg.getLongitudeBlock1()+msg.getLongitudeBlock2()+msg.getLongitudeBlock3();
    		
    		return "Message ; "+messageEncrypted+", Latitude : "+latitudeEncrypted+", Longitude : "+longitudeEncrypted;
    	}
    	return "Soldier Message not found";
    }
}
















