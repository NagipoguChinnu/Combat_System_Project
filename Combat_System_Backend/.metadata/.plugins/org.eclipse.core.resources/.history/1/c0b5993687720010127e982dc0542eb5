package com.combatsystem.www.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.combatsystem.www.dto.UserResponseDto;
import com.combatsystem.www.model.IOTOperator;
import com.combatsystem.www.model.Soldier;
import com.combatsystem.www.model.UAVOperator;
import com.combatsystem.www.repository.IOTOperatorRepo;
import com.combatsystem.www.repository.SoldierRepo;
import com.combatsystem.www.repository.UAVOperatorRepo;
import com.combatsystem.www.service.AdminService;

@RestController
@RequestMapping("/admin")
@CrossOrigin(origins = "http://localhost:3000")
public class AdminController {

    @Autowired
    private AdminService adminService;
    
    @Autowired
    private UAVOperatorRepo uavRepository;
    
    @Autowired
    private SoldierRepo soldierRepository;
    
    @Autowired
    private IOTOperatorRepo iotRepository;

    @PostMapping("/login-request")
    public ResponseEntity<?> loginRequest(@RequestParam String email, @RequestParam String password) {
        // Debugging logs
        System.out.println("Entered email: " + email);
        System.out.println("Entered password: " + password);

        if (adminService.validateCredentials(email.trim(), password.trim())) {
            adminService.generateAndSendOtp(email.trim());
            return ResponseEntity.ok("OTP sent to email.");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid email or password");
        }
    }

    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOtp(@RequestParam String email, @RequestParam String otp) {
        if (adminService.verifyOtp(email.trim(), otp.trim())) {
            return ResponseEntity.ok("OTP verified. Login successful.");
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid OTP");
        }
    }
    
    @PutMapping("/approve/{role}/{id}")
    public ResponseEntity<?> approveUser(@PathVariable String role, @PathVariable Long id) {
        switch (role.toUpperCase()) {
            case "UAV_OPERATOR":
                UAVOperator uav = uavRepository.findById(id).orElse(null);
                if (uav != null) {
                    uav.setStatus("APPROVED");
                    uavRepository.save(uav);
                    return ResponseEntity.ok("UAV approved");
                }
                break;

            case "IOT_DEVICE_OPERATOR":
                IOTOperator iot = iotRepository.findById(id).orElse(null);
                if (iot != null) {
                    iot.setStatus("APPROVED");
                    iotRepository.save(iot);
                    return ResponseEntity.ok("IOT approved");
                }
                break;

            case "SOLDIER":
                Soldier soldier = soldierRepository.findById(id).orElse(null);
                if (soldier != null) {
                    soldier.setStatus("APPROVED");
                    soldierRepository.save(soldier);
                    return ResponseEntity.ok("Soldier approved");
                }
                break;
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
    }



    @PutMapping("/deny/{role}/{id}")
    public ResponseEntity<?> denyUser(@PathVariable String role, @PathVariable Long id) {
        switch (role.toUpperCase()) {
            case "UAV_OPERATOR":
                UAVOperator uav = uavRepository.findById(id).orElse(null);
                if (uav != null) {
                    uav.setStatus("DENIED");
                    uavRepository.save(uav);
                    return ResponseEntity.ok("UAV denied");
                }
                break;

            case "IOT_DEVICE_OPERATOR":
                IOTOperator iot = iotRepository.findById(id).orElse(null);
                if (iot != null) {
                    iot.setStatus("DENIED");
                    iotRepository.save(iot);
                    return ResponseEntity.ok("IOT denied");
                }
                break;

            case "SOLDIER":
                Soldier soldier = soldierRepository.findById(id).orElse(null);
                if (soldier != null) {
                    soldier.setStatus("DENIED");
                    soldierRepository.save(soldier);
                    return ResponseEntity.ok("Soldier denied");
                }
                break;
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
    }
    
    @GetMapping("/fetch-all-users")
    public ResponseEntity<List<UserResponseDto>> getAllUsers() {
        return ResponseEntity.ok(adminService.fetchAllUsers());
    }
    

    @GetMapping("/decrypt-messages/uav/{id}")
    public ResponseEntity<List<String>> decryptUAVMessage(@PathVariable Long id) {
        return ResponseEntity.ok(adminService.decryptUavMessages(id));
    }

    @GetMapping("/decrypt-message/iot/{id}")
    public ResponseEntity<String> decryptIOTMessage(@PathVariable Long id) {
        return ResponseEntity.ok(adminService.decryptIotMessage(id));
    }

    @GetMapping("/decrypt-message/soldier/{id}")
    public ResponseEntity<String> decryptSoldierMessage(@PathVariable Long id) {
        return ResponseEntity.ok(adminService.decryptSoldierMessage(id));
    }
    
    @GetMapping("/encrypt-message/uav/{id}")
    public ResponseEntity<String> uavEncryptedMessage(@PathVariable Long userId)
    {
    	return ResponseEntity.ok(adminService.uavEncryptMessage(userId));
    }
    
    @GetMapping("/encrypt-message/iot/{id}")
    public ResponseEntity<String> iotEncryptedMessage(@PathVariable Long id)
    {
    	return ResponseEntity.ok(adminService.iotEncryptMessage(id));
    }
    
    @GetMapping("/encrypt-message/soldier/{id}")
    public ResponseEntity<String> soldierEncryptedMessage(@PathVariable Long id)
    {
    	return ResponseEntity.ok(adminService.soldierEncryptedMessage(id));
    }

}





